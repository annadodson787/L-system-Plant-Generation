#pragma once
#include "Common.h"
#include "SceneGraph.h"
#include "OpenGLMesh.h"

/////////////////////////////////////////////////////////////////////////////////////////////
// Part 1: Computing Local to World Node Transformations
/////////////////////////////////////////////////////////////////////////////////////////////
void Update_Nodes_Recursive(
	SceneGraph<3>* scenegraph, 
	int node_index, 
	const glm::mat4& parent_transform) {

	const auto& node = scenegraph->nodes[node_index];
	auto translate_matrix = glm::translate(glm::mat4(1), node.pos);
	auto rotate_matrix = glm::toMat4(node.rot);

	/////////////////////////////////////////////////////////////////////////////////////////////
	// Compute the local to world matrix for this node and store it in
	// scenegraph->node_world_transforms[node_index]
	/////////////////////////////////////////////////////////////////////////////////////////////


	/////////////////////////////////////////////////////////////////////////////////////////////
	// Recursively update child nodes
	// Child node indices are stored in scenegraph->nodes[node_index].children_indices
	/////////////////////////////////////////////////////////////////////////////////////////////

	
	/////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////
// Part 2: Computing Skinning Matrices
/////////////////////////////////////////////////////////////////////////////////////////////
void Update_Skeleton(
	const SceneGraph<3>* scenegraph, 
	Skeleton<3>* skeleton) {
	/////////////////////////////////////////////////////////////////////////////////////////////
	// For each joint in skeleton->joints
	// Update the skinning matrices stored in skeleton->skinning_matrices
	// You can retrieve B^-1 from skeleton->inv_bind_matrices
	// The joints of the skeleton are stored in skeleton->joints, to retrive the node to world
	// transform of a joint with the index "i", you would do the following
	// scenegraph->node_world_transforms[skeleton->joints[i]]
	/////////////////////////////////////////////////////////////////////////////////////////////

	/////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////
// Part 3: Transforming Vertices
/////////////////////////////////////////////////////////////////////////////////////////////
void SkinVertices(
	const Array<glm::vec4>& bind_pose_vertices, 
	const Array<Vector4>& weights,
	const Array<Vector4i>& joints, 
	const Array<glm::mat4>& skinning_matrices, 
	
	Array<glm::vec4>& skinned_vertices) {

	/////////////////////////////////////////////////////////////////////////////////////////////
	// Compute the skinned vertex positions and store them in 
	// skinned_vertices
	/////////////////////////////////////////////////////////////////////////////////////////////


	/////////////////////////////////////////////////////////////////////////////////////////////
}